<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Q42.HueApi</name>
    </assembly>
    <members>
        <member name="T:Q42.HueApi.Converters.HueDateTimeConverter">
            <summary>
            Custom DateTime converter for hue bridge
            </summary>
        </member>
        <member name="T:Q42.HueApi.Converters.DateTimeConverter">
            <summary>
            Custom DateTime converter for hue bridge
            </summary>
        </member>
        <member name="T:Q42.HueApi.HttpBridgeLocator">
            <summary>
            Uses the special nupnp url from meethue.com to find registered bridges based on your external IP
            </summary>
        </member>
        <member name="T:Q42.HueApi.Interfaces.IBridgeLocator">
            <summary>
            Different platforms can make specific implementations of this interface
            </summary>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IBridgeLocator.LocateBridgesAsync(System.TimeSpan)">
            <summary>
            Returns list of bridge IPs
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HttpBridgeLocator.LocateBridgesAsync(System.TimeSpan)">
            <summary>
            Locate bridges
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:Q42.HueApi.HueClient">
            <summary>
             Partial HueClient, contains requests to the /api/ url
            </summary>
            <summary>
            Partial HueClient, contains requests to the /config/ url
            </summary>
            <summary>
            Partial HueClient, contains requests to the /config/ url
            </summary>
            <summary>
            Partial HueClient, contains requests to the /Groups/ url
            </summary>
            <summary>
            Partial HueClient, contains requests to the /rules/ url
            </summary>
            <summary>
            Partial HueClient, contains requests to the /scenes/ url
            </summary>
            <summary>
            Partial HueClient, contains requests to the /scenes/ url
            </summary>
            <summary>
            Partial HueClient, contains requests to the /lights/ url
            </summary>
            <summary>
            Partial HueClient, contains requests to the /schedules/ url
            </summary>
            <summary>
            Responsible for communicating with the bridge
            </summary>
        </member>
        <member name="T:Q42.HueApi.Interfaces.IHueClient">
            <summary>
            Hue Client for interaction with the bridge
            </summary>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.Initialize(System.String)">
            <summary>
            Initialize the client with your app key
            </summary>
            <param name="appKey"></param>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.RegisterAsync(System.String,System.String)">
            <summary>
            Register your <paramref name="appName"/> and <paramref name="appKey"/> at the Hue Bridge.
            </summary>
            <param name="appKey">Secret key for your app. Must be at least 10 characters.</param>
            <param name="appName">The name of your app or device.</param>
            <returns><c>true</c> if success, <c>false</c> if the link button hasn't been pressed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="appName"/> or <paramref name="appKey"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="appName"/> or <paramref name="appKey"/> aren't long enough, are empty or contains spaces.</exception>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.CheckConnection">
            <summary>
            Check if there is a working connection with the bridge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.GetWhiteListAsync">
            <summary>
            Asynchronously gets all lights registered with the bridge.
            </summary>
            <returns>An enumerable of <see cref="T:Q42.HueApi.WhiteList"/>s registered with the bridge.</returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.GetBridgeAsync">
            <summary>
            Get bridge info
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.UpdateBridgeConfigAsync(Q42.HueApi.BridgeConfigUpdate)">
            <summary>
            Update bridge config
            </summary>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.DeleteWhiteListEntryAsync(System.String)">
            <summary>
            Deletes a whitelist entry
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.SendGroupCommandAsync(Q42.HueApi.Interfaces.ICommandBody,System.String)">
            <summary>
            Send command to a group
            </summary>
            <param name="command"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.CreateGroupAsync(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a group for a set of lights
            </summary>
            <param name="lights"></param>
            <param name="name">Group Name (optional)</param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.DeleteGroupAsync(System.String)">
            <summary>
            Deletes a single group
            </summary>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.GetGroupsAsync">
            <summary>
            Get all groups
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.GetGroupAsync(System.String)">
            <summary>
            Get the state of a single group
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.UpdateGroupAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Update a group
            </summary>
            <param name="id">Group ID</param>
            <param name="lights">List of light IDs</param>
            <param name="name">Group Name (optional)</param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.SetNextHueColorAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set the next Hue color
            </summary>
            <param name="lightList"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.GetLightsAsync">
            <summary>
            Asynchronously gets all lights registered with the bridge.
            </summary>
            <returns>An enumerable of <see cref="T:Q42.HueApi.Light"/>s registered with the bridge.</returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.GetLightAsync(System.String)">
            <summary>
            Asynchronously retrieves an individual light.
            </summary>
            <param name="id">The light's Id.</param>
            <returns>The <see cref="T:Q42.HueApi.Light"/> if found, <c>null</c> if not.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="id"/> is empty or a blank string.</exception>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.DeleteLightAsync(System.String)">
            <summary>
            Delete Light
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.SetLightNameAsync(System.String,System.String)">
            <summary>
            Sets the light name
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.SendCommandRawAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Send a raw string / json command
            </summary>
            <param name="command">json</param>
            <param name="lightList">if null, send to all lights</param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.SendCommandAsync(Q42.HueApi.LightCommand,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Send a light command
            </summary>
            <param name="command">Compose a new lightCommand()</param>
            <param name="lightList">if null, send to all lights</param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.SearchNewLightsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Start searching for new lights
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.GetNewLightsAsync">
            <summary>
            Gets a list of lights that were discovered the last time a search for new lights was performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.GetSchedulesAsync">
            <summary>
            Get all schedules
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.GetScheduleAsync(System.String)">
            <summary>
            Get a single schedule
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.CreateScheduleAsync(Q42.HueApi.Models.Schedule)">
            <summary>
            Create a schedule
            </summary>
            <param name="schedule"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.UpdateScheduleAsync(System.String,Q42.HueApi.Models.Schedule)">
            <summary>
            Update a schedule
            </summary>
            <param name="id"></param>
            <param name="schedule"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.DeleteScheduleAsync(System.String)">
            <summary>
            Delete a schedule
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.Interfaces.IHueClient.DeleteSensorAsync(System.String)">
            <summary>
            Delete Sensor
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:Q42.HueApi.Interfaces.IHueClient.ApiBase">
            <summary>
            Base address url
            </summary>
        </member>
        <member name="M:Q42.HueApi.HueClient.RegisterAsync(System.String,System.String)">
            <summary>
            Register your <paramref name="appName"/> and <paramref name="appKey"/> at the Hue Bridge.
            </summary>
            <param name="appKey">Secret key for your app. Must be at least 10 characters.</param>
            <param name="appName">The name of your app or device.</param>
            <returns><c>true</c> if success, <c>false</c> if the link button hasn't been pressed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="appName"/> or <paramref name="appKey"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="appName"/> or <paramref name="appKey"/> aren't long enough, are empty or contains spaces.</exception>
        </member>
        <member name="M:Q42.HueApi.HueClient.GetTimeZonesAsync">
            <summary>
            Get all Timezones
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.DeleteWhiteListEntryAsync(System.String)">
            <summary>
            Deletes a whitelist entry
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.GetWhiteListAsync">
            <summary>
            Asynchronously gets the whitelist with the bridge.
            </summary>
            <returns>An enumerable of <see cref="T:Q42.HueApi.WhiteList"/>s registered with the bridge.</returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.GetBridgeAsync">
            <summary>
            Get bridge info
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.GetConfigAsync">
            <summary>
            Get bridge config
            </summary>
            <returns>BridgeConfig object</returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.UpdateBridgeConfigAsync(Q42.HueApi.BridgeConfigUpdate)">
            <summary>
            Update bridge config
            </summary>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.CreateGroupAsync(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Create a group for a list of lights
            </summary>
            <param name="lights"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.DeleteGroupAsync(System.String)">
            <summary>
            Deletes a single group
            </summary>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.SendGroupCommandAsync(Q42.HueApi.Interfaces.ICommandBody,System.String)">
            <summary>
            Send command to a group
            </summary>
            <param name="command"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.SendGroupCommandAsync(System.String,System.String)">
            <summary>
            Send command to a group
            </summary>
            <param name="command"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.GetGroupsAsync">
            <summary>
            Get all groups
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.GetGroupAsync(System.String)">
            <summary>
            Get the state of a single group
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.UpdateGroupAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Update a group
            </summary>
            <param name="id">Group ID</param>
            <param name="lights">List of light IDs</param>
            <param name="name">Group Name</param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.GetRulesAsync">
            <summary>
            Asynchronously gets all rules registered with the bridge.
            </summary>
            <returns>An enumerable of <see cref="T:Q42.HueApi.Models.Rule"/>s registered with the bridge.</returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.GetRuleAsync(System.String)">
            <summary>
            Asynchronously gets single rule
            </summary>
            <returns><see cref="T:Q42.HueApi.Models.Rule"/></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.DeleteRule(System.String)">
            <summary>
            Deletes a rule
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.GetSensorsAsync">
            <summary>
            Asynchronously gets all sensors registered with the bridge.
            </summary>
            <returns>An enumerable of <see cref="T:Q42.HueApi.Models.Sensor"/>s registered with the bridge.</returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.FindNewSensorsAsync">
            <summary>
            Starts a search for new sensors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.GetNewSensorsAsync">
            <summary>
            Gets a list of sensors that were discovered the last time a search for new sensors was performed. The list of new sensors is always deleted when a new search is started.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.GetSensorAsync(System.String)">
            <summary>
            Asynchronously gets single sensor
            </summary>
            <returns><see cref="T:Q42.HueApi.Models.Sensor"/></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.UpdateSensorAsync(System.String,System.String)">
            <summary>
            Update a sensor
            </summary>
            <param name="id"></param>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.ChangeSensorConfigAsync(System.String,Q42.HueApi.Models.SensorConfig)">
            <summary>
            Changes the Sensor configuration
            </summary>
            <param name="id"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.DeleteSensorAsync(System.String)">
            <summary>
            Deletes a single sensor
            </summary>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.GetScenesAsync">
            <summary>
            Asynchronously gets all scenes registered with the bridge.
            </summary>
            <returns>An enumerable of <see cref="T:Q42.HueApi.Models.Scene"/>s registered with the bridge.</returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.GetLightAsync(System.String)">
            <summary>
            Asynchronously retrieves an individual light.
            </summary>
            <param name="id">The light's Id.</param>
            <returns>The <see cref="T:Q42.HueApi.Light"/> if found, <c>null</c> if not.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="id"/> is empty or a blank string.</exception>
        </member>
        <member name="M:Q42.HueApi.HueClient.SetLightNameAsync(System.String,System.String)">
            <summary>
            Sets the light name
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.GetLightsAsync">
            <summary>
            Asynchronously gets all lights registered with the bridge.
            </summary>
            <returns>An enumerable of <see cref="T:Q42.HueApi.Light"/>s registered with the bridge.</returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.SendCommandAsync(Q42.HueApi.LightCommand,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Send a lightCommand to a list of lights
            </summary>
            <param name="command"></param>
            <param name="lightList">if null, send command to all lights</param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.SendCommandRawAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Send a json command to a list of lights
            </summary>
            <param name="command"></param>
            <param name="lightList">if null, send command to all lights</param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.SetNextHueColorAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set the next Hue color
            </summary>
            <param name="lightList"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.SearchNewLightsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Start searching for new lights
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.GetNewLightsAsync">
            <summary>
            Gets a list of lights that were discovered the last time a search for new lights was performed. The list of new lights is always deleted when a new search is started.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.DeleteLightAsync(System.String)">
            <summary>
            Deletes a single light
            </summary>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.GetSchedulesAsync">
            <summary>
            Get all schedules
            </summary>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.GetScheduleAsync(System.String)">
            <summary>
            Get a single schedule
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.CreateScheduleAsync(Q42.HueApi.Models.Schedule)">
            <summary>
            Create a schedule
            </summary>
            <param name="schedule"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.UpdateScheduleAsync(System.String,Q42.HueApi.Models.Schedule)">
            <summary>
            Update a schedule
            </summary>
            <param name="id"></param>
            <param name="schedule"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.DeleteScheduleAsync(System.String)">
            <summary>
            Delete a schedule
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.#ctor(System.String)">
            <summary>
            Initialize with Bridge IP
            </summary>
            <param name="ip"></param>
        </member>
        <member name="M:Q42.HueApi.HueClient.CheckValidIp(System.String)">
            <summary>
            Check if the provided IP is valid by using it in an URI to the Hue Bridge
            </summary>
            <param name="ip"></param>
        </member>
        <member name="M:Q42.HueApi.HueClient.#ctor(System.String,System.String)">
            <summary>
            Initialize with Bridge IP and AppKey
            </summary>
            <param name="ip"></param>
            <param name="appKey"></param>
        </member>
        <member name="M:Q42.HueApi.HueClient.Initialize(System.String)">
            <summary>
            Initialize client with your app key
            </summary>
            <param name="appKey"></param>
        </member>
        <member name="M:Q42.HueApi.HueClient.CheckInitialized">
            <summary>
            Check if the HueClient is initialized
            </summary>
        </member>
        <member name="M:Q42.HueApi.HueClient.DeserializeResult``1(System.String)">
            <summary>
            Deserialization helper that can also check for errors
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueClient.DeserializeDefaultHueResult(System.String)">
            <summary>
            Checks if the json contains errors
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:Q42.HueApi.HueClient.DeserializeDefaultHueResult``1(System.String)">
            <summary>
            Checks if the json contains errors
            </summary>
            <param name="json"></param>
        </member>
        <member name="P:Q42.HueApi.HueClient.IsInitialized">
            <summary>
            Indicates the HueClient is initialized with an AppKey
            </summary>
        </member>
        <member name="P:Q42.HueApi.HueClient.ApiBase">
            <summary>
            Base URL for the API
            </summary>
        </member>
        <member name="T:Q42.HueApi.HueColorConverter">
            <summary>
            Used to convert colors between XY and RGB
            internal: Do not expose
            </summary>
            <summary>
            Used to convert colors between XY and RGB
            internal: Do not expose
            </summary>
        </member>
        <member name="M:Q42.HueApi.HueColorConverter.XyFromColor(System.String,System.String,System.String)">
            <summary>
            Get XY from red,green,blue strings / ints
            </summary>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueColorConverter.XyFromColor(System.Int32,System.Int32,System.Int32)">
            <summary>
             Get XY from red,green,blue ints
            </summary>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueColorConverter.CheckPointInLampsReach(Q42.HueApi.CGPoint)">
            <summary>
             Method to see if the given XY value is within the reach of the lamps.
            </summary>
            <param name="p">p the point containing the X,Y value</param>
            <returns>true if within reach, false otherwise.</returns>
        </member>
        <member name="M:Q42.HueApi.HueColorConverter.CrossProduct(Q42.HueApi.CGPoint,Q42.HueApi.CGPoint)">
            <summary>
            Calculates crossProduct of two 2D vectors / points.
            </summary>
            <param name="p1"> p1 first point used as vector</param>
            <param name="p2">p2 second point used as vector</param>
            <returns>crossProduct of vectors</returns>
        </member>
        <member name="M:Q42.HueApi.HueColorConverter.GetClosestPointToPoint(Q42.HueApi.CGPoint,Q42.HueApi.CGPoint,Q42.HueApi.CGPoint)">
            <summary>
            Find the closest point on a line.
            This point will be within reach of the lamp.
            </summary>
            <param name="A">A the point where the line starts</param>
            <param name="B">B the point where the line ends</param>
            <param name="P">P the point which is close to a line.</param>
            <returns> the point which is on the line.</returns>
        </member>
        <member name="M:Q42.HueApi.HueColorConverter.GetDistanceBetweenTwoPoints(Q42.HueApi.CGPoint,Q42.HueApi.CGPoint)">
            <summary>
            Find the distance between two points.
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <returns>the distance between point one and two</returns>
        </member>
        <member name="M:Q42.HueApi.HueColorConverter.HexFromState(Q42.HueApi.State)">
            <summary>
            Returns hexvalue from Light State
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.HueColorConverter.HexFromXy(System.Double,System.Double)">
            <summary>
            Get the HEX color from an XY value
            </summary>
            <param name="xNumber"></param>
            <param name="yNumber"></param>
            <returns></returns>
        </member>
        <member name="T:Q42.HueApi.CGPoint">
            <summary>
            Internal helper class, holds XY
            </summary>
        </member>
        <member name="T:Q42.HueApi.Extensions.IEnumerableExtensions">
            <summary>
            IEnumerable Helpers
            </summary>
        </member>
        <member name="M:Q42.HueApi.Extensions.IEnumerableExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            http://blogs.msdn.com/b/pfxteam/archive/2012/03/04/10277325.aspx
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="dop"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="T:Q42.HueApi.BridgeState">
            <summary>
            Status data returned from the bridge
            </summary>
        </member>
        <member name="T:Q42.HueApi.Bridge">
            <summary>
            Hue Bridge
            </summary>
        </member>
        <member name="P:Q42.HueApi.Bridge.Lights">
            <summary>
            Light info from the bridge
            </summary>
        </member>
        <member name="P:Q42.HueApi.Bridge.Config">
            <summary>
            Bridge config info
            </summary>
        </member>
        <member name="P:Q42.HueApi.Bridge.WhiteList">
            <summary>
            Light info from the bridge
            </summary>
        </member>
        <member name="T:Q42.HueApi.BridgeConfigUpdate">
            <summary>
            Allowed properties to update the BridgeConfig
            </summary>
        </member>
        <member name="P:Q42.HueApi.Models.Groups.Group.Type">
            <summary>
            Luminaire / Lightsource / LightGroup
            </summary>
        </member>
        <member name="P:Q42.HueApi.Models.Groups.Group.ModelId">
            <summary>
            As of 1.4. Uniquely identifies the hardware model of the luminaire. Only present for automatically created Luminaires.
            </summary>
        </member>
        <member name="P:Q42.HueApi.Models.Groups.Group.Lights">
            <summary>
            Lights property only filled when getting a single group
            </summary>
        </member>
        <member name="P:Q42.HueApi.Models.Groups.Group.Action">
            <summary>
            Action property only filled when getting a single group
            </summary>
        </member>
        <member name="T:Q42.HueApi.Models.Groups.HueResults">
            <summary>
            A PUT or POST returns a list which can contain multiple success and errors
            </summary>
        </member>
        <member name="P:Q42.HueApi.Models.HueDateTime.DateTime">
            <summary>
            Absolute time
            </summary>
        </member>
        <member name="P:Q42.HueApi.Models.HueDateTime.TimerTime">
            <summary>
            Timers and timeparts for recurring times
            </summary>
        </member>
        <member name="P:Q42.HueApi.Models.HueDateTime.RandomizedTime">
            <summary>
            Randomized time
            </summary>
        </member>
        <member name="P:Q42.HueApi.Models.HueDateTime.RecurringDay">
            <summary>
            Recurring days
            </summary>
        </member>
        <member name="P:Q42.HueApi.Models.HueDateTime.NumberOfRecurrences">
            <summary>
            Number of recurrences (0=repeat forever)
            </summary>
        </member>
        <member name="T:Q42.HueApi.SceneCommand">
            <summary>
            Send a SceneID as command
            </summary>
        </member>
        <member name="P:Q42.HueApi.SceneCommand.Scene">
            <summary>
            Scene ID to activate
            </summary>
        </member>
        <member name="T:Q42.HueApi.LightCommand">
            <summary>
            Compose a light command to send to a light
            </summary>
        </member>
        <member name="P:Q42.HueApi.LightCommand.ColorCoordinates">
            <summary>
            Gets or sets the colors based on CIE 1931 Color coordinates.
            </summary>
        </member>
        <member name="P:Q42.HueApi.LightCommand.Brightness">
            <summary>
            Gets or sets the brightness 0-255.
            </summary>
        </member>
        <member name="P:Q42.HueApi.LightCommand.Hue">
            <summary>
            Gets or sets the hue for Hue and <see cref="P:Q42.HueApi.LightCommand.Saturation"/> mode.
            </summary>
        </member>
        <member name="P:Q42.HueApi.LightCommand.Saturation">
            <summary>
            Gets or sets the saturation for <see cref="P:Q42.HueApi.LightCommand.Hue"/> and Saturation mode.
            </summary>
        </member>
        <member name="P:Q42.HueApi.LightCommand.ColorTemperature">
            <summary>
            Gets or sets the Color Temperature
            </summary>
        </member>
        <member name="P:Q42.HueApi.LightCommand.On">
            <summary>
            Gets or sets whether the light is on.
            </summary>
        </member>
        <member name="P:Q42.HueApi.LightCommand.Effect">
            <summary>
            Gets or sets the current effect for the light.
            </summary>
        </member>
        <member name="P:Q42.HueApi.LightCommand.Alert">
            <summary>
            Gets or sets the current alert for the light.
            </summary>
        </member>
        <member name="P:Q42.HueApi.LightCommand.TransitionTime">
            <summary>
            Gets or sets the transition time for the light.
            </summary>
        </member>
        <member name="P:Q42.HueApi.LightCommand.BrightnessIncrement">
            <summary>
            -254 to 254
            As of 1.7. Increments or decrements the value of the brightness.  bri_inc is ignored if the bri attribute is provided. Any ongoing bri transition is stopped. Setting a value of 0 also stops any ongoing transition. The bridge will return the bri value after the increment is performed.
            </summary>
        </member>
        <member name="P:Q42.HueApi.LightCommand.SaturationIncrement">
            <summary>
            -254 to 254
            As of 1.7. Increments or decrements the value of the sat.  sat_inc is ignored if the sat attribute is provided. Any ongoing sat transition is stopped. Setting a value of 0 also stops any ongoing transition. The bridge will return the sat value after the increment is performed.
            </summary>
        </member>
        <member name="P:Q42.HueApi.LightCommand.HueIncrement">
            <summary>
            -65534 to 65534
            As of 1.7. Increments or decrements the value of the hue.   hue_inc is ignored if the hue attribute is provided. Any ongoing color transition is stopped. Setting a value of 0 also stops any ongoing transition. The bridge will return the hue value after the increment is performed.
            </summary>
        </member>
        <member name="P:Q42.HueApi.LightCommand.ColorTemperatureIncrement">
            <summary>
            -65534 to 65534
            As of 1.7. Increments or decrements the value of the ct. ct_inc is ignored if the ct attribute is provided. Any ongoing color transition is stopped. Setting a value of 0 also stops any ongoing transition. The bridge will return the ct value after the increment is performed.
            </summary>
        </member>
        <member name="P:Q42.HueApi.LightCommand.ColorCoordinatesIncrement">
            <summary>
            -0.5 to 0.5
            As of 1.7. Increments or decrements the value of the xy.  xy_inc is ignored if the xy attribute is provided. Any ongoing color transition is stopped.  Will stop at it's gamut boundaries. Setting a value of 0 also stops any ongoing transition.  The bridge will return the xy value after the increment is performed.
            </summary>
        </member>
        <member name="T:Q42.HueApi.Alert">
            <summary>
            Possible light alerts
            </summary>
        </member>
        <member name="F:Q42.HueApi.Alert.None">
            <summary>
            Stop alert
            </summary>
        </member>
        <member name="F:Q42.HueApi.Alert.Once">
            <summary>
            Alert once
            </summary>
        </member>
        <member name="F:Q42.HueApi.Alert.Multiple">
            <summary>
            Alert multiple times
            </summary>
        </member>
        <member name="T:Q42.HueApi.Effect">
            <summary>
            Possible light effects
            </summary>
        </member>
        <member name="F:Q42.HueApi.Effect.None">
            <summary>
            Stop current effect
            </summary>
        </member>
        <member name="F:Q42.HueApi.Effect.ColorLoop">
            <summary>
            Color loop
            </summary>
        </member>
        <member name="T:Q42.HueApi.lightCommandExtensions">
            <summary>
            Extension methods to compose a light command
            </summary>
        </member>
        <member name="M:Q42.HueApi.lightCommandExtensions.SetColor(Q42.HueApi.LightCommand,System.String)">
            <summary>
            Helper to set the color based on a HEX value
            </summary>
            <param name="lightCommand"></param>
            <param name="hexColor"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.lightCommandExtensions.SetColor(Q42.HueApi.LightCommand,System.String,System.String,System.String)">
            <summary>
            Helper to set the color based on RGB strings
            </summary>
            <param name="lightCommand"></param>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.lightCommandExtensions.SetColor(Q42.HueApi.LightCommand,System.Int32,System.Int32,System.Int32)">
            <summary>
            Helper to set the color based on RGB
            </summary>
            <param name="lightCommand"></param>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.lightCommandExtensions.SetColor(Q42.HueApi.LightCommand,System.Double,System.Double)">
            <summary>
            Helper to set the color based on the light's built in XY color schema
            </summary>
            <param name="lightCommand"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.lightCommandExtensions.SetColor(Q42.HueApi.LightCommand,System.Int32)">
            <summary>
            Helper to set the color based on the light's built in CT color scheme
            </summary>
            <param name="lightCommand"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.lightCommandExtensions.TurnOn(Q42.HueApi.LightCommand)">
            <summary>
            Helper to create turn on command
            </summary>
            <param name="lightCommand"></param>
            <returns></returns>
        </member>
        <member name="M:Q42.HueApi.lightCommandExtensions.TurnOff(Q42.HueApi.LightCommand)">
            <summary>
            Helper to create turn off command
            </summary>
            <param name="lightCommand"></param>
            <returns></returns>
        </member>
        <member name="P:Q42.HueApi.Light.UniqueId">
            <summary>
            Unique id of the device. The MAC address of the device with a unique endpoint id in the form: AA:BB:CC:DD:EE:FF:00:11-XX
            </summary>
        </member>
        <member name="T:Q42.HueApi.NuPnPResponse">
            <summary>
            Model for response from http://www.meethue.com/api/nupnp
            </summary>
        </member>
        <member name="T:Q42.HueApi.Models.RuleOperator">
            <summary>
            Possible light alerts
            </summary>
        </member>
        <member name="F:Q42.HueApi.Models.RuleOperator.Equal">
            <summary>
            Equal, Used for bool and int.
            </summary>
        </member>
        <member name="F:Q42.HueApi.Models.RuleOperator.OnChange">
            <summary>
            OnChange, Used for Time (timestamps) int and bool values..
            </summary>
        </member>
        <member name="F:Q42.HueApi.Models.RuleOperator.LessThan">
            <summary>
            LessThan, Allowed on int values
            </summary>
        </member>
        <member name="F:Q42.HueApi.Models.RuleOperator.GreaterThan">
            <summary>
            GreaterThan, Allowed on int values
            </summary>
        </member>
        <member name="P:Q42.HueApi.Models.Schedule.Time">
            <summary>
            UTC time
            </summary>
        </member>
        <member name="P:Q42.HueApi.Models.Schedule.StartTime">
            <summary>
            UTC time that the timer was started. Only provided for timers.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Q42.HueApi.Models.Schedule.Status" -->
        <member name="P:Q42.HueApi.Models.Schedule.AutoDelete">
            <summary>
            If set to true, the schedule will be removed automatically if expired, if set to false it will be disabled. Default is true
            </summary>
        </member>
        <member name="P:Q42.HueApi.SoftwareUpdate.UpdateState">
            <summary>
            0 means there is no update at all.
            1 means there is an update to download. The bridge will eventually download it by himself. 
            2 means there is an update available to apply.
            3 means apply/applying the update. 
            http://www.everyhue.com/vanilla/discussion/484/firmware-update-triggering
            </summary>
        </member>
        <member name="P:Q42.HueApi.SoftwareUpdate.CheckForUpdate">
            <summary>
            Setting this flag to true lets the bridge search for software updates in the portal. After the search attempt, this flag is set back to false. Requires portal connection to update server
            </summary>
        </member>
    </members>
</doc>
